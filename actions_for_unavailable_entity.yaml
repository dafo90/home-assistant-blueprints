blueprint:
  name: Execute actions when an entity becomes unavailable
  description: Execute actions when an entity becomes unavailable (this is a fork from https://gist.github.com/sagilo/9c5f85794fa8ee3427e7cdab27f573f5)
  source_url: https://github.com/dafo90/home-assistant-blueprints/blob/master/actions_for_unavailable_entity.yaml
  domain: automation
  input:
    minutes:
      name: Frequency
      description: Set frequency in minutes to run the automation.
      default: 5
      selector:
        number:
          min: 1
          max: 59
    helper_last_unavailable_entities:
      name: Last unavailable entities
      description: Set an input_text to store the list of unavailable entities.
      selector:
        entity:
          domain: input_text
    exclude_entities:
      name: Excluded Entities (Optional)
      description: Choose the entities to be excluded from trigger.

        **NOTE** - You can only use entities. Areas and devices are not supported.
      default: { entity_id: [] }
      selector:
        target:
          entity:
            domain:
              - binary_sensor
              - button
              - climate
              - cover
              - device_tracker
              - fan
              - light
              - number
              - sensor
              - sun
              - switch
              - vacuum
    actions:
      name: Actions
      description: "Actions to execute, the variable `new_unavailable_entities` is a list of all new unavailable `entity_id`s (to print the name: `{{ state_attr(entity_id, 'friendly_name') }}`)."
      selector:
        action: {}
variables:
  exclude_entities: !input exclude_entities
  minutes: !input minutes
  helper_last_unavailable_entities: !input helper_last_unavailable_entities
  domains:
    - binary_sensor
    - button
    - climate
    - cover
    - device_tracker
    - fan
    - light
    - number
    - sensor
    - sun
    - switch
    - vacuum
  unavailable_entities: >-
    {% set unavailable_entities = namespace(sensors=[]) %}
    {% for state in states.sensor | rejectattr('attributes.domain', 'undefined') | selectattr('attributes.domain', 'in', domains) %}
      {% if state.state == 'unavailable' and state.entity_id not in exclude_entities.entity_id %}
        {% set unavailable_entities.sensors = unavailable_entities.sensors + [state.entity_id] %}
      {% endif %}
    {% endfor %}
    {{ unavailable_entities.sensors }}
  new_unavailable_entities: >-
    {% set new_unavailable_entities = namespace(sensors=[]) %}
    {% for entity_id in unavailable_entities %}
      {% if entity_id in (states(helper_last_unavailable_entities) | from_json) %}
        {% set new_unavailable_entities.sensors = new_unavailable_entities.sensors + [entity_id] %}
      {% endif %}
    {% endfor %}
    {{ new_unavailable_entities.sensors }}
alias: Execute actions when an entity becomes unavailable
description: ''
trigger:
  - platform: time_pattern
    minutes: "{{ '/' ~ minutes }}"
action:
  - choose: []
    default: !input 'actions'
  - service: input_text.set_value
    data:
      entity_id: !input helper_last_unavailable_entities
      value: "{{ unavailable_entities | to_json }}"
mode: single